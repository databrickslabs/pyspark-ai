"""
Unit test class generated by LLM for remove_non_word_characters function
"""

import unittest
from pyspark.sql import SparkSession
from pyspark.sql.functions import col
from pyspark.sql.types import StringType, StructField, StructType

def remove_non_word_characters(df, column_name):
    return df.withColumn(column_name, col(column_name).regexp_replace("[^a-zA-Z0-9_]", ""))

class TestRemoveNonWordCharacters(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.spark = SparkSession.builder \
            .appName("TestRemoveNonWordCharacters") \
            .getOrCreate()

    @classmethod
    def tearDownClass(cls):
        cls.spark.stop()

    def test_remove_non_word_characters(self):
        schema = StructType([
            StructField("text", StringType(), True)
        ])
        data = [("H@ll0 W0r!d",), ("$p4rk i$ c00l",), ("T3$t c@se$",)]
        expected_data = [("Hll0W0rd",), ("p4rkic00l",), ("T3tce",)]

        input_df = self.spark.createDataFrame(data, schema)
        expected_df = self.spark.createDataFrame(expected_data, schema)

        result_df = remove_non_word_characters(input_df, "text")

        self.assertTrue(result_df.collect() == expected_df.collect())

    def test_remove_non_word_characters_empty(self):
        schema = StructType([
            StructField("text", StringType(), True)
        ])
        data = [("",)]
        expected_data = [("",)]

        input_df = self.spark.createDataFrame(data, schema)
        expected_df = self.spark.createDataFrame(expected_data, schema)

        result_df = remove_non_word_characters(input_df, "text")

        self.assertTrue(result_df.collect() == expected_df.collect())

if __name__ == "__main__":
    unittest.main()